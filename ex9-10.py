import numpy as np  # Импорт библиотеки NumPy и создание синонима np

def find_and_multiply_rows(matrix, c, d):
    """
    Функция ищет строки матрицы, содержащие элемент c,
    и умножает элементы этих строк на d.
    
    Аргументы:
    matrix: numpy.ndarray - исходная матрица
    c: int - элемент, который ищем в строках
    d: int - множитель для элементов строк
    
    Возвращает:
    matrix: numpy.ndarray - модифицированная матрица
    """
    rows_to_multiply = []  # Создаем список для хранения номеров строк, которые нужно умножить
    for i, row in enumerate(matrix):  # Проходим по каждой строке матрицы
        if c in row:  # Если элемент c присутствует в текущей строке
            rows_to_multiply.append(i)  # Добавляем номер строки в список
    
    # Умножаем элементы строк, содержащих c, на d
    for row_num in rows_to_multiply:
        matrix[row_num] = [element * d for element in matrix[row_num]]
    
    return matrix  # Возвращаем модифицированную матрицу

def find_max_sum_row_odd_elements(matrix):
    """
    Функция ищет строку матрицы с максимальной суммой модулей нечетных элементов.
    
    Аргументы:
    matrix: numpy.ndarray - исходная матрица
    
    Возвращает:
    max_sum_row: int - номер строки с максимальной суммой модулей нечетных элементов
    """
    max_sum = 0  # Переменная для хранения максимальной суммы модулей
    max_sum_row = None  # Переменная для хранения номера строки с максимальной суммой модулей

    # Проходим по каждой строке матрицы
    for i, row in enumerate(matrix):
        if all(element % 2 != 0 for element in row):  # Проверяем, что все элементы строки нечетные
            row_sum = sum(abs(element) for element in row)  # Считаем сумму модулей элементов строки
            if row_sum > max_sum:  # Если сумма модулей больше текущей максимальной
                max_sum = row_sum  # Обновляем максимальную сумму
                max_sum_row = i  # Запоминаем номер строки

    return max_sum_row  # Возвращаем номер строки с максимальной суммой модулей нечетных элементов

# Пример использования:
R = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])  # Создаем исходную матрицу
c = 5  # Задаем элемент c
d = 10  # Задаем множитель d

# Вызываем функцию для умножения строк, содержащих c, на d
R_modified = find_and_multiply_rows(R, c, d)
print("Матрица R с умноженными на", d, "строками, содержащими", c, ":", R_modified)

# Вызываем функцию для поиска строки с максимальной суммой модулей нечетных элементов
max_sum_row = find_max_sum_row_odd_elements(R)
print("Строка с максимальной суммой модулей нечетных элементов:", max_sum_row)


# Этот код сначала определяет функции для выполнения каждого из пунктов задачи. Затем создается пример матрицы R, после чего вызываются функции для решения задачи.